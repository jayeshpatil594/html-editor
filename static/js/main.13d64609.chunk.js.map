{"version":3,"sources":["components/Editor/Editor.styles.js","components/Editor/Editor.jsx","components/IFrame/IFrame.styles.js","components/IFrame/IFrame.jsx","mocks/sample.js","App.js","reportWebVitals.js","index.js"],"names":["EditorWrapper","styled","div","Editor","onChange","mode","value","theme","name","editorProps","$blockScrolling","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","tabSize","IFrameWrapper","IFrame","source","title","srcDoc","SAMPLE_CODE","DARK_MODE_ID","LIGHT_MODE_ID","DARK_MODE_THEME","LIGHT_MODE_THEME","Wrapper","Options","Button","button","SaveButton","App","useState","setValue","setSource","setTheme","useCallback","e","runCode","changeTheme","target","saveCode","blob","Blob","type","saveAs","className","onClick","id","checked","for","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAEMA,EAAgBC,IAAOC,IAAV,sO,OCsCJC,EAjCA,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACvC,OACE,cAAC,WAAD,UACE,cAACP,EAAD,UACE,cAAC,IAAD,CACEK,KAAMA,EACNE,MAAOA,EACPD,MAAOA,EACPF,SAAUA,EACVI,KAXmB,SAYnBC,YAAa,CAAEC,iBAAiB,GAChCC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,QAAS,UCvBfC,EAAgBlB,IAAOC,IAAV,2LCkBJkB,EAdA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,cAAC,WAAD,UACE,cAACF,EAAD,UACE,wBAAQG,MANc,SAMgBC,OAAQF,S,QCVzCG,EAAW,oNCkBlBC,G,oCAAe,aACfC,EAAgB,aAChBC,EAAkB,UAClBC,EAAmB,SAgEnBC,EAAU5B,IAAOC,IAAV,mMAYP4B,EAAU7B,IAAOC,IAAV,uJAQP6B,EAAS9B,IAAO+B,OAAV,iJASNC,EAAahC,IAAO+B,OAAV,kLAUDE,EApGH,WACV,MAA0BC,mBAAS,IAAnC,mBAAO7B,EAAP,KAAc8B,EAAd,KACA,EAA4BD,mBAAS,IAArC,mBAAOd,EAAP,KAAegB,EAAf,KACA,EAA0BF,mBALNR,WAKpB,mBAAOpB,EAAP,KAAc+B,EAAd,KAEMlC,EAAWmC,uBAAY,SAACC,GAC5BJ,EAASI,KACR,IAEGC,EAAUF,uBAAY,WAC1BF,EAAU/B,KACT,CAAC+B,EAAW/B,IAEToC,EAAcH,uBAAY,SAACC,GAC/BF,EAASE,EAAEG,OAAOrC,SACjB,IAEGsC,EAAWL,uBAAY,WAC3B,IAAMM,EAAO,IAAIC,KAAK,CAACxC,GAAQ,CAAEyC,KAAM,6BACvCC,iBAAOH,EAAM,kBACZ,CAACvC,IAOJ,OACE,sBAAK2C,UAAU,MAAf,UACE,eAACpB,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAQmB,QAAST,EAAjB,SAxCgB,QAuClB,IACyD,uBACvD,cAACR,EAAD,CAAYiB,QAASN,EAArB,SAxCiB,SAyCjB,iCACE,0CACA,uBACEG,KAAK,QACLI,GAAI1B,EACJnB,MAAOqB,EACPyB,QAAS7C,IAAUoB,EACnBvB,SAAUsC,IAEZ,uBAAOW,IAAK5B,EAAZ,gBACA,uBACEsB,KAAK,QACLI,GAAIzB,EACJpB,MAAOsB,EACPwB,QAAS7C,IAAUqB,EACnBxB,SAAUsC,IAEZ,uBAAOW,IAAK3B,EAAZ,uBAGJ,cAAC,EAAD,CAAQtB,SAAUA,EAAUE,MAAOA,EAAOD,KAAK,OAAOE,MAAOA,IAC7D,cAAC,EAAD,CAAQc,OAAQA,OAElB,cAACU,EAAD,CAAQmB,QAlCU,WACpBd,EAASZ,GACTa,EAAUb,IAgCR,sBA5BF,IA4BqD,4DCpE1C8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13d64609.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst EditorWrapper = styled.div`\r\n  height: 100%;\r\n  width: 50%;\r\n  margin-right: 1rem;\r\n  .ace_editor {\r\n    width: 100% !important;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    width: 100%;\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\nexport { EditorWrapper };\r\n","import { Fragment } from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { EditorWrapper } from \"./Editor.styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RESOURCE_EDITOR_NAME = \"editor\";\r\n\r\nconst Editor = ({ onChange, mode, value, theme }) => {\r\n  return (\r\n    <Fragment>\r\n      <EditorWrapper>\r\n        <AceEditor\r\n          mode={mode}\r\n          theme={theme}\r\n          value={value}\r\n          onChange={onChange}\r\n          name={RESOURCE_EDITOR_NAME}\r\n          editorProps={{ $blockScrolling: true }}\r\n          showPrintMargin={true}\r\n          showGutter={true}\r\n          highlightActiveLine={true}\r\n          setOptions={{\r\n            enableBasicAutocompletion: true,\r\n            enableLiveAutocompletion: true,\r\n            enableSnippets: true,\r\n            tabSize: 2,\r\n          }}\r\n        />\r\n      </EditorWrapper>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditor.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  mode: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  theme: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Editor;\r\n","import styled from \"styled-components\";\r\n\r\nconst IFrameWrapper = styled.div`\r\n  height: 100%;\r\n  width: 50%;\r\n\r\n  iframe {\r\n    height: 500px;\r\n    width: 100%;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport { IFrameWrapper };\r\n","import { Fragment } from \"react\";\r\nimport { IFrameWrapper } from \"./IFrame.styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RESOURCE_IFRAME_TITLE = \"output\";\r\n\r\nconst IFrame = ({ source }) => {\r\n  return (\r\n    <Fragment>\r\n      <IFrameWrapper>\r\n        <iframe title={RESOURCE_IFRAME_TITLE} srcDoc={source} />\r\n      </IFrameWrapper>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nIFrame.propTypes = {\r\n  source: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default IFrame;\r\n","export const SAMPLE_CODE = `\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<h1>My First Web Page</h1>\r\n<p>My First Paragraph</p>\r\n\r\n<p id=\"demo\"></p>\r\n\r\n<script>\r\ndocument.getElementById(\"demo\").innerHTML = 5 + 6;\r\n</script>\r\n\r\n</body>\r\n</html>\r\n`;\r\n","import { useState, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport Editor from \"./components/Editor/Editor\";\r\nimport IFrame from \"./components/IFrame/IFrame\";\r\nimport styled from \"styled-components\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { SAMPLE_CODE } from './mocks/sample'\r\n\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/snippets/html\";\r\nimport \"ace-builds/src-min-noconflict/ext-searchbox\";\r\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\r\n\r\nconst RESOURCE_RUN_TEXT = \"Run\";\r\nconst RESOURCE_SAVE_TEXT = \"Save\";\r\n\r\nconst DARK_MODE_ID = \"dark-mode\";\r\nconst LIGHT_MODE_ID = \"light-mode\";\r\nconst DARK_MODE_THEME = \"monokai\";\r\nconst LIGHT_MODE_THEME = \"github\";\r\nconst DEFAULT_THEME = DARK_MODE_THEME;\r\n\r\nconst App = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [source, setSource] = useState(\"\");\r\n  const [theme, setTheme] = useState(DEFAULT_THEME);\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e);\r\n  }, []);\r\n\r\n  const runCode = useCallback(() => {\r\n    setSource(value);\r\n  }, [setSource, value]);\r\n\r\n  const changeTheme = useCallback((e) => {\r\n    setTheme(e.target.value);\r\n  }, []);\r\n\r\n  const saveCode = useCallback(() => {\r\n    const blob = new Blob([value], { type: \"text/plain;charset=utf-8\" });\r\n    saveAs(blob, \"download.txt\");\r\n  }, [value]);\r\n\r\n  const runSampleCode = () => {\r\n    setValue(SAMPLE_CODE)\r\n    setSource(SAMPLE_CODE)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Wrapper>\r\n        <Options>\r\n          <Button onClick={runCode}>{RESOURCE_RUN_TEXT}</Button> <br />\r\n          <SaveButton onClick={saveCode}>{RESOURCE_SAVE_TEXT}</SaveButton>\r\n          <form>\r\n            <p>Dark mode</p>\r\n            <input\r\n              type=\"radio\"\r\n              id={DARK_MODE_ID}\r\n              value={DARK_MODE_THEME}\r\n              checked={theme === DARK_MODE_THEME}\r\n              onChange={changeTheme}\r\n            />\r\n            <label for={DARK_MODE_ID}>On</label>\r\n            <input\r\n              type=\"radio\"\r\n              id={LIGHT_MODE_ID}\r\n              value={LIGHT_MODE_THEME}\r\n              checked={theme === LIGHT_MODE_THEME}\r\n              onChange={changeTheme}\r\n            />\r\n            <label for={LIGHT_MODE_ID}>Off</label>\r\n          </form>\r\n        </Options>\r\n        <Editor onChange={onChange} value={value} mode=\"html\" theme={theme} />\r\n        <IFrame source={source} />\r\n      </Wrapper>\r\n      <Button onClick={runSampleCode} >Click me</Button> <span>to run a sample code</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  p {\r\n    margin: 0;\r\n  }\r\n  @media only screen and (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Options = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media only screen and (max-width: 600px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 2rem;\r\n  width: 5rem;\r\n  margin-right: 0.5rem;\r\n  background: green;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SaveButton = styled.button`\r\n  height: 2rem;\r\n  width: 5rem;\r\n  margin-right: 0.5rem;\r\n  background: cornflowerblue;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}